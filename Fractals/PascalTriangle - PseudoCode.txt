//          1
//         1 1
//        1 2 1
//       1 3 3 1
//      1 4 6 4 1
//    1 5 10 10 5 1 
//   1 6 15 20 15 6 1

// The Pascal triangle looks like this
// We observe that currentRow[i] = previousRow[i] + previousRow[i + 1]
// 3 = 1 + 2;
// 4 = 3 + 1;
// 6 = 3 + 3;
// 5 = 4 + 1;
// 10 = 4 + 6;
// and so on

// Pascal triangle pseudoCode
main()
{
    print("Size of pascal triangle: ");
    size = input();
    previous[] = int[size];
    current[] = int[size];
    current[0] = 1;
    pascalTriangle(1, size, current, previous);

}

pascalTriangle(iteration, size, currentRow, previousRow)
{
    // We print the spaces so it looks like a triangle
    for(i = 0; i < size - iteration; i++)
    {
        print(" ");
    }
    
    // for row > 2 we calculate
    if(iteration > 2)
    {
        // we always start with a 1
        print("1 ");
        
        // for starting from 1 because we call previousRow[i - 1]
        // we already printed the 1 (currentRow[0] == 1);
        for(i = 1; i < iteration; i++)
        {
            // calculate and print the current row
            currentRow[i] = previousRow[i] + previousRow[i - 1];
            print(currentRow[i] + " ");
        }
        // print a new line
        print('\n');
    }else if(iteration == 2)
        {
        // row 2 looks like this
        print("1 1");
    
    } else 
        {
        // row 1 looks like this
        print("1");
    }
    
    // if iteration < size it needs to recursively call itself
    if(iteration < size)
    {
        // currentRow becomes previousRow
        // copy the contents of currentRow into previousRow
        // and call recursively
        previousRow = Arrays.copyOf(currentRow, size);
        pascalTriangle(iteration + 1, size, currentRow, previousRow);
        
        
    } else
    // iteration == size, so we stop
        {
        return;
    }
}








